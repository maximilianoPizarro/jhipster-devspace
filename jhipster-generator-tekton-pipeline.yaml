apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: workspace 
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi
---      
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: jhipster-generator
spec:
  description: |-
    Write a file to a workspace
    This task can be used to write a file onto the output workspace. Use parameter expansion to insert variable content into the written file. It can also set specific permissions on the file.
  params:
  - default: $(params.JDL_CONTENTS)
    description: |
      Contents of the JDL file to create. https://www.jhipster.tech/jdl/getting-started
    name: JDL_CONTENTS
    type: string
  - default: $(params.APP_NAME)
    description: |
      app name. delivery by default
    name: APP_NAME
    type: string
  - default: $(params.JHIPSTER_IMAGE_VERSION)
    description: |
      jhipster docker image version. By default docker.io./jhipster/jhipster:v8.1.0
    name: JHIPSTER_IMAGE_VERSION
    type: string
  - default: $(params.GITLAB_REPO)
    name: GITLAB_REPO
    type: string
    description: |
      The output repository to use for the git push step.
  - default: $(params.GITLAB_EMAIL)
    name: GITLAB_EMAIL
    type: string
    description: |
      GitLab User account.        
  - default: $(params.GITLAB_USERNAME)
    name: GITLAB_USERNAME
    type: string
    description: |
      GitLab User account.
  - default: $(params.GITLAB_ACCESSTOKEN)
    name: GITLAB_ACCESSTOKEN
    type: string
    description: |
      Access token Gitlab. Generate in https://gitlab.com/-/user_settings/personal_access_tokens          
  steps:
  - computeResources: {}
    env:
    - name: JDL_CONTENTS
      value: $(params.JDL_CONTENTS)
    - name: JHIPSTER_IMAGE_VERSION
      value: $(params.JHIPSTER_IMAGE_VERSION)      
    image: $(params.JHIPSTER_IMAGE_VERSION)
    name: generate-jdl
    script: |
      #!/bin/sh
      printf '%s' "$(params.JDL_CONTENTS)" > "$(workspaces.source.path)/model.jdl"
      cat $(workspaces.source.path)/model.jdl
    workingDir: $(workspaces.source.path)
  - computeResources: {}
    name: generate-jhipster-from-jdl
    image: $(params.JHIPSTER_IMAGE_VERSION)
    env:
    - name: JHIPSTER_IMAGE_VERSION
      value: $(params.JHIPSTER_IMAGE_VERSION)
    - name: GITLAB_EMAIL
      value: $(params.GITLAB_EMAIL)
    - name: GITLAB_USERNAME
      value: $(params.GITLAB_USERNAME)  
    script: |
      #!/bin/sh
      git config --global --add safe.directory $(workspaces.source.path)
      git config --global user.email $(params.GITLAB_EMAIL)
      git config --global user.name $(params.GITLAB_USERNAME)
      git init
      jhipster jdl $(workspaces.source.path)/model.jdl --no-insight
      ./mvnw clean verify -Pprod -Dmaven.test.skip=true
    workingDir: $(workspaces.source.path)
  - computeResources: {}
    name: commit-and-push-repo
    image: $(params.JHIPSTER_IMAGE_VERSION)
    env:
    - name: JHIPSTER_IMAGE_VERSION
      value: $(params.JHIPSTER_IMAGE_VERSION)
    - name: GITLAB_EMAIL
      value: $(params.GITLAB_EMAIL)
    - name: GITLAB_USERNAME
      value: $(params.GITLAB_USERNAME)
    - name: GITLAB_REPO
      value: $(params.GITLAB_REPO)
    - name: GITLAB_ACCESSTOKEN
      value: $(params.GITLAB_ACCESSTOKEN)              
    script: |
      #!/bin/sh
      rm -r $(workspaces.source.path)/.git/*
      git config --global --add safe.directory $(workspaces.source.path)
      git config --global user.email $(params.GITLAB_EMAIL)
      git config --global user.name $(params.GITLAB_USERNAME)      
      git init
      git remote add origin https://$(params.GITLAB_USERNAME):$(params.GITLAB_ACCESSTOKEN)@$(params.GITLAB_REPO)
      git checkout -b main
      git add .
      git commit -m "Jhipster Tekton pipeline autogenerate project"
      git push --set-upstream origin main
    workingDir: $(workspaces.source.path)    
  workspaces:
  - description: Workspace app generate.
    mountPath: /home/jhipster/app
    name: source
  - description: .m2 cache.
    mountPath: /home/jhipster/.m2
    name: m2
---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: jhipster-generator-tekton-pipeline
spec:
  params:
    - default: 'docker.io/jhipster/jhipster:v8.1.0'
      description: |
        Oficial JHipster Image from docker.io/jhipster/jhipster:v8.1.0. 
        Import your namespace with oc import-image docker.io/jhipster/jhipster:v8.1.0 --confirm
        and replace default value to internal registry for example image-registry.openshift-image-registry.svc:5000/<NAMESPACE>/jhipster:v8.1.0.
      name: JHIPSTER_IMAGE_VERSION
      type: string
    - default: delivery
      description: |
        app name.      
      name: APP_NAME
      type: string
    - default: "application {   config {   \tapplicationType monolith     baseName delivery     packageName com.delivery.app     authenticationType jwt     prodDatabaseType mariadb     databaseType sql     devDatabaseType h2Memory     buildTool maven     clientFramework vue     clientTheme solar     clientThemeVariant dark     enableTranslation true     nativeLanguage es     languages [en, nl]   }   entities * }    entity Region { \tregionName String }  entity Country { \tcountryName String }  // an ignored comment /** not an ignored comment */ entity Location { \tstreetAddress String \tpostalCode String \tcity String \tstateProvince String }  entity Department { \tdepartmentName String required }  /**  * Task entity.  * @author The JHipster team.  */ entity Task { \ttitle String \tdescription String }  /**  * The Employee entity.  */ entity Employee { \t/** \t* The firstname attribute. \t*/ \tfirstName String \tlastName String \temail String \tphoneNumber String \thireDate Instant \tsalary Long \tcommissionPct Long }  entity Job { \tjobTitle String \tminSalary Long \tmaxSalary Long }  entity JobHistory { \tstartDate Instant \tendDate Instant \tlanguage Language }  enum Language {     FRENCH, ENGLISH, SPANISH }  relationship OneToOne { \tCountry{region} to Region }  relationship OneToOne { \tLocation{country} to Country }  relationship OneToOne { \tDepartment{location} to Location }  relationship ManyToMany { \tJob{task(title)} to Task{job} }  // defining multiple OneToMany relationships with comments relationship OneToMany { \tEmployee to Job{employee} \t/** \t* A relationship \t*/ \tDepartment to \t/** \t* Another side of the same relationship \t*/ \tEmployee{department} }  relationship ManyToOne { \tEmployee{manager} to Employee }  // defining multiple oneToOne relationships relationship OneToOne { \tJobHistory{job} to Job \tJobHistory{department} to Department \tJobHistory{employee} to Employee }  // Set pagination options paginate JobHistory, Employee with infinite-scroll paginate Job with pagination  // Use Data Transfer Objects (DTO) // dto * with mapstruct  // Set service options to all except few service all with serviceImpl except Employee, Job"
      description: |
        Contents of the JDL file to create. https://www.jhipster.tech/jdl/getting-started           
      name: JDL_CONTENTS
      type: string
    - default: gitlab.com/maximilianoPizarro/app.git
      description: |
        The output repository to use for the git push step.
      name: GITLAB_REPO
      type: string
    - default: maximiliano.pizarro.5@gmail.com
      description: |
        GitLab User account.        
      name: GITLAB_EMAIL
      type: string
    - default: maximilianoPizarro
      description: |
        GitLab User account.
      name: GITLAB_USERNAME
      type: string
    - default: <your-access-token-value>
      description: |
        Access token Gitlab. Generate in https://gitlab.com/-/user_settings/personal_access_tokens                                       
      name: GITLAB_ACCESSTOKEN
      type: string
  tasks:
    - name: jhipster-generator
      params:
        - name: contents
          value: "application {\n  config {\n  \tapplicationType monolith\n    baseName delivery\n    packageName com.delivery.app\n    authenticationType jwt\n    prodDatabaseType mariadb\n    databaseType sql\n    devDatabaseType h2Memory\n    buildTool maven\n    clientFramework vue\n    clientTheme solar\n    clientThemeVariant dark\n    enableTranslation true\n    nativeLanguage es\n    languages [en, nl]\n  }\n  entities *\n}\n\n\n\nentity Region {\n\tregionName String\n}\n\nentity Country {\n\tcountryName String\n}\n\n// an ignored comment\n/** not an ignored comment */\nentity Location {\n\tstreetAddress String\n\tpostalCode String\n\tcity String\n\tstateProvince String\n}\n\nentity Department {\n\tdepartmentName String required\n}\n\n/**\n * Task entity.\n * @author The JHipster team.\n */\nentity Task {\n\ttitle String\n\tdescription String\n}\n\n/**\n * The Employee entity.\n */\nentity Employee {\n\t/**\n\t* The firstname attribute.\n\t*/\n\tfirstName String\n\tlastName String\n\temail String\n\tphoneNumber String\n\thireDate Instant\n\tsalary Long\n\tcommissionPct Long\n}\n\nentity Job {\n\tjobTitle String\n\tminSalary Long\n\tmaxSalary Long\n}\n\nentity JobHistory {\n\tstartDate Instant\n\tendDate Instant\n\tlanguage Language\n}\n\nenum Language {\n    FRENCH, ENGLISH, SPANISH\n}\n\nrelationship OneToOne {\n\tCountry{region} to Region\n}\n\nrelationship OneToOne {\n\tLocation{country} to Country\n}\n\nrelationship OneToOne {\n\tDepartment{location} to Location\n}\n\nrelationship ManyToMany {\n\tJob{task(title)} to Task{job}\n}\n\n// defining multiple OneToMany relationships with comments\nrelationship OneToMany {\n\tEmployee to Job{employee}\n\t/**\n\t* A relationship\n\t*/\n\tDepartment to\n\t/**\n\t* Another side of the same relationship\n\t*/\n\tEmployee{department}\n}\n\nrelationship ManyToOne {\n\tEmployee{manager} to Employee\n}\n\n// defining multiple oneToOne relationships\nrelationship OneToOne {\n\tJobHistory{job} to Job\n\tJobHistory{department} to Department\n\tJobHistory{employee} to Employee\n}\n\n// Set pagination options\npaginate JobHistory, Employee with infinite-scroll\npaginate Job with pagination\n\n// Use Data Transfer Objects (DTO)\n// dto * with mapstruct\n\n// Set service options to all except few\nservice all with serviceImpl except Employee, Job"
        - name: APP_NAME
          value: $(params.APP_NAME)
        - name: JDL_CONTENTS
          value: $(params.JDL_CONTENTS)
        - name: JHIPSTER_IMAGE_VERSION
          value: $(params.JHIPSTER_IMAGE_VERSION)
        - name: GITLAB_REPO
          value: $(params.GITLAB_REPO)
        - name: GITLAB_EMAIL
          value: $(params.GITLAB_EMAIL)
        - name: GITLAB_USERNAME
          value: $(params.GITLAB_USERNAME)
        - name: GITLAB_ACCESSTOKEN
          value: $(params.GITLAB_ACCESSTOKEN)
      taskRef:
        kind: Task
        name: jhipster-generator
      workspaces:
        - name: source
          workspace: workspace
        - name: m2
          workspace: workspace
  workspaces:
    - name: workspace
